const int sensors[5] = {A0, A1, A2, A3, A4}; // Analog pins for reading photoresistors (for binary LEDs)
const int shiftsens = A5; // Photoresistor for shift LED
const int specialsens = A6; // Photoresistor for special LED
const int clocksens = A7; // Photoresistor for clock light
String receivedMessage = ""; // Store the decoded message

void setup() {
  Serial.begin(9600); // Initialize serial communication
  while (!Serial);    // Wait for serial connection to initialize
  Serial.println("Receiver Ready");
  pinMode(clocksens, INPUT); // Clock light input
}

void loop() {
  // int clockValue=analogRead(clocksens);
  // Serial.print("clock value: ");
  // Serial.println(clockValue);

  // Check if the clock light photoresistor goes high
  if (analogRead(clocksens) > 800) { // Adjust threshold if needed
    // Read photoresistors to get the binary representation of the character
    int binaryValue = 0;
    for (int i = 0; i < 5; i++) {
      if (analogRead(sensors[i]) > 750) { // Adjust threshold
        binaryValue |= (1 << i); // Set bit i in binaryValue
      }
}
// Serial.print("binary of number is: ");
//Serial.println(binaryValue);
delay(2);//lessen if transmitter led's are on for less time Used to be (must be a little less than transmitter clock high delay) 8
//Serial.print(receivedMessage);

//decoding message
    // check if shift or special light is on
    bool isShift = analogRead(shiftsens) > 750; // Shift if high
    bool isSpecial = analogRead(specialsens) > 750; // Special if high
//empty  string for decoding each binary value to letter and number
char decodedChar = ' ';//

  if (isSpecial) {
      decodedChar = decodeSpecialCharacter(binaryValue, isShift); // passes 'binaryValue' into special charecter decoder fcn
    } else{
      decodedChar = decodeAlphaCharacter(binaryValue, isShift);//passes 'binaryValue' into letter decoding fcn
    }
//add decodedChar to total message
receivedMessage += decodedChar;

if(binaryValue == 31 && isShift && isSpecial){
  Serial.print("Received Message Hopefully: ");
  Serial.println(receivedMessage);
  receivedMessage = "";
  delay(5);
}




// delay(10000);//This is for testing, For actual use, should be (12)
  }

}

//Decoding Functions (where the magic happens!!) :) ;)


char decodeSpecialCharacter(int binaryValue, bool isShift) {
  if (isShift) {
    switch (binaryValue) {
      case 33: return '[';//32
      case 34: return ']';
      case 35: return '{';
      case 36: return '}';
      case 37: return '<';
      case 38: return '>';//37
      case 39: return '_';
      default: return ' ';
    }
  } else {
    switch (binaryValue) {
    case 0: return '0';
    case 1: return '1';
    case 2: return '2';
    case 3: return '3';
    case 4: return '4';
    case 5: return '5';
    case 6: return '6';
    case 7: return '7';
    case 8: return '8';
    case 9: return '9';
    case 10: return '+'; 
    case 11: return '-';
    case 12: return '*';
    case 13: return '/';
    case 14: return '=';
    case 15: return ':';
    case 16: return '.'; 
    case 17: return ',';
    case 18: return '?';
    case 19: return '!';
    case 20: return '\'';
    case 21: return '(';
    case 22: return ')';
    case 23: return '$';
    case 24: return ';';
    case 25: return '@';
    case 26: return '#';
    case 27: return '~';
    case 28: return '%';
    case 29: return '^';
    case 30: return '&';
    //DO NOT FUCKING DARE PUT 31
}

  }
}

// Function to decode alphabetic characters (lowercase or uppercase)
char decodeAlphaCharacter(int binaryValue, bool isShift) {
  if (binaryValue >= 1 && binaryValue <= 26) {
    return (isShift ? 'A' : 'a') + binaryValue - 1;//-1
  }
  return ' '; // Default if out of range
}
